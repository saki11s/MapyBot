import telebot
from telebot import types 
from config import * 
from logic import DB_Map 
import os 

if not TOKEN:
    raise ValueError("–ù–µ–æ–±—Ö–æ–¥–∏–º–æ —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å TOKEN –≤ config.py")
if not DATABASE:
    raise ValueError("–ù–µ–æ–±—Ö–æ–¥–∏–º–æ —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å DATABASE –≤ config.py")

bot = telebot.TeleBot(TOKEN)
manager = DB_Map(DATABASE)
manager.create_user_settings_table()

CALLBACK_PREFIX_DELETE_CITY = "del_city_"
CALLBACK_PREFIX_COLOR_CHOICE = "set_color_"

MARKER_COLORS = {
    "–ö—Ä–∞—Å–Ω—ã–π ‚ù§Ô∏è": "red",
    "–°–∏–Ω–∏–π üíô": "blue",
    "–ó–µ–ª–µ–Ω—ã–π üíö": "green",
    "–§–∏–æ–ª–µ—Ç–æ–≤—ã–π üíú": "purple",
    "–û—Ä–∞–Ω–∂–µ–≤—ã–π üß°": "orange",
    "–ß–µ—Ä–Ω—ã–π ‚ö´": "black"
}

def get_city_name_from_args(message_text, command_name):
    try:
        return message_text.split(f'/{command_name}', 1)[1].strip()
    except IndexError:
        return None

def create_cities_inline_keyboard(user_id, prefix):
    cities = manager.select_cities(user_id)
    markup = types.InlineKeyboardMarkup(row_width=1) 
    
    if not cities:
        return None

    buttons = []
    for city_name in cities:
        buttons.append(types.InlineKeyboardButton(text=f"‚ùå {city_name}", 
                                                  callback_data=f"{prefix}{city_name}"))
    markup.add(*buttons)
    return markup

def create_color_inline_keyboard(prefix):
    markup = types.InlineKeyboardMarkup(row_width=2)
    buttons = []
    for display_name, color_code in MARKER_COLORS.items():
        buttons.append(types.InlineKeyboardButton(text=display_name, callback_data=f"{prefix}{color_code}"))
    markup.add(*buttons)
    return markup

@bot.message_handler(commands=['start'])
def handle_start(message):
    bot.send_message(message.chat.id, "üëã –ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç, –∫–æ—Ç–æ—Ä—ã–π –º–æ–∂–µ—Ç –ø–æ–∫–∞–∑—ã–≤–∞—Ç—å –≥–æ—Ä–æ–¥–∞ –Ω–∞ –∫–∞—Ä—Ç–µ. –ù–∞–ø–∏—à–∏ /help –¥–ª—è —Å–ø–∏—Å–∫–∞ –∫–æ–º–∞–Ω–¥.")

@bot.message_handler(commands=['help'])
def handle_help(message):
    help_text = (
        "üìö –î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:\n"
        "/start - –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ\n"
        "/help - –ü–æ–∫–∞–∑–∞—Ç—å —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ\n"
        "/remember_city <–ù–∞–∑–≤–∞–Ω–∏–µ–ì–æ—Ä–æ–¥–∞> - –°–æ—Ö—Ä–∞–Ω–∏—Ç—å –≥–æ—Ä–æ–¥ –≤ —Ç–≤–æ–π —Å–ø–∏—Å–æ–∫ (–ø–∏—à–∏ –Ω–∞ –∞–Ω–≥–ª–∏–π—Å–∫–æ–º, –Ω–∞–ø—Ä–∏–º–µ—Ä, New York).\n"
        "/show_city <–ù–∞–∑–≤–∞–Ω–∏–µ–ì–æ—Ä–æ–¥–∞> - –ü–æ–∫–∞–∑–∞—Ç—å –∫–∞—Ä—Ç—É —Å —É–∫–∞–∑–∞–Ω–Ω—ã–º –≥–æ—Ä–æ–¥–æ–º (–Ω–∞ –∞–Ω–≥–ª–∏–π—Å–∫–æ–º).\n"
        "/show_my_cities - –ü–æ–∫–∞–∑–∞—Ç—å –∫–∞—Ä—Ç—É —Å–æ –≤—Å–µ–º–∏ —Ç–≤–æ–∏–º–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–º–∏ –≥–æ—Ä–æ–¥–∞–º–∏.\n"
        "/delete_my_city - –£–¥–∞–ª–∏—Ç—å –≥–æ—Ä–æ–¥ –∏–∑ —Å–ø–∏—Å–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã—Ö.\n"
        "/set_marker_color - –í—ã–±—Ä–∞—Ç—å —Ü–≤–µ—Ç –º–∞—Ä–∫–µ—Ä–æ–≤ –Ω–∞ –∫–∞—Ä—Ç–µ."
    )
    bot.send_message(message.chat.id, help_text)

@bot.message_handler(commands=['show_city'])
def handle_show_city(message):
    city_name = get_city_name_from_args(message.text, 'show_city')
    
    if not city_name:
        bot.send_message(message.chat.id, "‚ùì –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏ –Ω–∞–∑–≤–∞–Ω–∏–µ –≥–æ—Ä–æ–¥–∞ –ø–æ—Å–ª–µ –∫–æ–º–∞–Ω–¥—ã. –ù–∞–ø—Ä–∏–º–µ—Ä: /show_city London")
        return

    if not manager.get_coordinates(city_name):
        bot.send_message(message.chat.id, f"ü§∑ –ì–æ—Ä–æ–¥ '{city_name}' –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –º–æ–µ–π –±–∞–∑–µ. –£–±–µ–¥–∏—Å—å, —á—Ç–æ –æ–Ω –Ω–∞–ø–∏—Å–∞–Ω –Ω–∞ –∞–Ω–≥–ª–∏–π—Å–∫–æ–º!")
        return
    
    status_message = bot.send_message(message.chat.id, f"üó∫Ô∏è –ì–µ–Ω–µ—Ä–∏—Ä—É—é –∫–∞—Ä—Ç—É –¥–ª—è –≥–æ—Ä–æ–¥–∞ {city_name}... –≠—Ç–æ –º–æ–∂–µ—Ç –∑–∞–Ω—è—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–æ —Å–µ–∫—É–Ω–¥.")
    
    image_path = f"map_{message.chat.id}_{city_name.replace(' ', '_')}.png"
    
    user_marker_color = manager.get_user_marker_color(message.chat.id)

    if manager.create_grapf(image_path, [city_name], marker_color=user_marker_color):
        try:
            with open(image_path, 'rb') as photo:
                bot.send_photo(message.chat.id, photo, caption=f"‚úÖ –ö–∞—Ä—Ç–∞ –¥–ª—è –≥–æ—Ä–æ–¥–∞: {city_name}")
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Ñ–æ—Ç–æ {image_path}: {e}")
            bot.send_message(message.chat.id, "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –∫–∞—Ä—Ç—ã.")
        finally:
            if os.path.exists(image_path):
                os.remove(image_path)
        bot.delete_message(chat_id=status_message.chat.id, message_id=status_message.message_id)
    else:
        bot.edit_message_text(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –∫–∞—Ä—Ç—É –¥–ª—è –≥–æ—Ä–æ–¥–∞ '{city_name}'. –í–æ–∑–º–æ–∂–Ω–æ, –¥–ª—è –Ω–µ–≥–æ –Ω–µ—Ç –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö –≤ –±–∞–∑–µ.",
                              chat_id=status_message.chat.id, message_id=status_message.message_id)


@bot.message_handler(commands=['remember_city'])
def handle_remember_city(message):
    user_id = message.chat.id
    city_name = get_city_name_from_args(message.text, 'remember_city')

    if not city_name:
        bot.send_message(message.chat.id, "‚ùì –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏ –Ω–∞–∑–≤–∞–Ω–∏–µ –≥–æ—Ä–æ–¥–∞ –ø–æ—Å–ª–µ –∫–æ–º–∞–Ω–¥—ã. –ù–∞–ø—Ä–∏–º–µ—Ä: /remember_city Paris")
        return
    
    result = manager.add_city(user_id, city_name)
    if result == 1:
        bot.send_message(message.chat.id, f'‚úÖ –ì–æ—Ä–æ–¥ {city_name} —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω!')
    elif result == 2:
        bot.send_message(message.chat.id, f'‚ÑπÔ∏è –ì–æ—Ä–æ–¥ {city_name} —É–∂–µ –±—ã–ª —Å–æ—Ö—Ä–∞–Ω–µ–Ω —Ä–∞–Ω–µ–µ.')
    else:
        bot.send_message(message.chat.id, f'ü§∑ –ì–æ—Ä–æ–¥ "{city_name}" –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –º–æ–µ–π –±–∞–∑–µ. –£–±–µ–¥–∏—Å—å, —á—Ç–æ –æ–Ω –Ω–∞–ø–∏—Å–∞–Ω –Ω–∞ –∞–Ω–≥–ª–∏–π—Å–∫–æ–º!')

@bot.message_handler(commands=['show_my_cities'])
def handle_show_my_cities(message):
    user_id = message.chat.id
    cities = manager.select_cities(user_id)

    if not cities:
        bot.send_message(message.chat.id, "üòû –¢—ã –µ—â–µ –Ω–µ —Å–æ—Ö—Ä–∞–Ω–∏–ª –Ω–∏ –æ–¥–Ω–æ–≥–æ –≥–æ—Ä–æ–¥–∞. –ò—Å–ø–æ–ª—å–∑—É–π –∫–æ–º–∞–Ω–¥—É /remember_city <–ù–∞–∑–≤–∞–Ω–∏–µ–ì–æ—Ä–æ–¥–∞>.")
        return
    
    status_message = bot.send_message(message.chat.id, "üåç –ì–µ–Ω–µ—Ä–∏—Ä—É—é –∫–∞—Ä—Ç—É –¥–ª—è –≤—Å–µ—Ö —Ç–≤–æ–∏—Ö —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã—Ö –≥–æ—Ä–æ–¥–æ–≤... –≠—Ç–æ –º–æ–∂–µ—Ç –∑–∞–Ω—è—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–æ —Å–µ–∫—É–Ω–¥.")

    image_path = f"map_{user_id}_my_cities.png"
    
    user_marker_color = manager.get_user_marker_color(message.chat.id)

    if manager.create_grapf(image_path, cities, marker_color=user_marker_color):
        try:
            with open(image_path, 'rb') as photo:
                bot.send_photo(message.chat.id, photo, caption="‚úÖ –ö–∞—Ä—Ç–∞ —Ç–≤–æ–∏—Ö —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã—Ö –≥–æ—Ä–æ–¥–æ–≤")
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Ñ–æ—Ç–æ {image_path}: {e}")
            bot.send_message(message.chat.id, "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –∫–∞—Ä—Ç—ã.")
        finally:
            if os.path.exists(image_path):
                os.remove(image_path)
        bot.delete_message(chat_id=status_message.chat.id, message_id=status_message.message_id)
    else:
        bot.edit_message_text("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –∫–∞—Ä—Ç—É. –í–æ–∑–º–æ–∂–Ω–æ, –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã—Ö –≥–æ—Ä–æ–¥–æ–≤ –Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö.",
                              chat_id=status_message.chat.id, message_id=status_message.message_id)

@bot.message_handler(commands=['delete_my_city'])
def command_delete_my_city(message):
    user_id = message.chat.id
    markup = create_cities_inline_keyboard(user_id, CALLBACK_PREFIX_DELETE_CITY)
    if markup:
        bot.send_message(user_id, "üóëÔ∏è –í—ã–±–µ—Ä–∏ –≥–æ—Ä–æ–¥, –∫–æ—Ç–æ—Ä—ã–π —Ö–æ—á–µ—à—å —É–¥–∞–ª–∏—Ç—å –∏–∑ —Å–ø–∏—Å–∫–∞:", reply_markup=markup)
    else:
        bot.send_message(user_id, "üóëÔ∏è –£ —Ç–µ–±—è –Ω–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã—Ö –≥–æ—Ä–æ–¥–æ–≤ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è.")

@bot.callback_query_handler(func=lambda call: call.data.startswith(CALLBACK_PREFIX_DELETE_CITY))
def callback_delete_city(call):
    user_id = call.from_user.id
    message_id = call.message.message_id
    chat_id = call.message.chat.id

    city_to_delete = call.data[len(CALLBACK_PREFIX_DELETE_CITY):]

    if manager.delete_city_from_user_list(user_id, city_to_delete):
        bot.answer_callback_query(call.id, text=f"‚úÖ –ì–æ—Ä–æ–¥ {city_to_delete} —É–¥–∞–ª–µ–Ω.")
        
        new_markup = create_cities_inline_keyboard(user_id, CALLBACK_PREFIX_DELETE_CITY)
        if new_markup:
            try:
                bot.edit_message_text("üóëÔ∏è –°–ø–∏—Å–æ–∫ –æ–±–Ω–æ–≤–ª–µ–Ω. –í—ã–±–µ—Ä–∏ —Å–ª–µ–¥—É—é—â–∏–π –≥–æ—Ä–æ–¥ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è:",
                                      chat_id=chat_id,
                                      message_id=message_id,
                                      reply_markup=new_markup)
            except telebot.apihelper.ApiTelegramException as e:
                if "message is not modified" in str(e).lower():
                    pass 
                else:
                    print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}") 
        else:
            bot.edit_message_text("‚ú® –í—Å–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–µ –≥–æ—Ä–æ–¥–∞ —É–¥–∞–ª–µ–Ω—ã.",
                                  chat_id=chat_id,
                                  message_id=message_id,
                                  reply_markup=None) 
    else:
        bot.answer_callback_query(call.id, text=f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å {city_to_delete}. –í–æ–∑–º–æ–∂–Ω–æ, –æ–Ω —É–∂–µ –±—ã–ª —É–¥–∞–ª–µ–Ω.", show_alert=True)
        current_markup = create_cities_inline_keyboard(user_id, CALLBACK_PREFIX_DELETE_CITY)
        if current_markup:
             bot.edit_message_reply_markup(chat_id=chat_id, message_id=message_id, reply_markup=current_markup)
        else:
             bot.edit_message_text("üóëÔ∏è –ù–µ—Ç –≥–æ—Ä–æ–¥–æ–≤ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è.", chat_id=chat_id, message_id=message_id, reply_markup=None)

@bot.message_handler(commands=['set_marker_color'])
def command_set_marker_color(message):
    markup = create_color_inline_keyboard(CALLBACK_PREFIX_COLOR_CHOICE)
    current_color = manager.get_user_marker_color(message.chat.id)
    current_color_display = next((name for name, code in MARKER_COLORS.items() if code == current_color), current_color)
    bot.send_message(message.chat.id, f"üé® –í—ã–±–µ—Ä–∏ —Ü–≤–µ—Ç –¥–ª—è –º–∞—Ä–∫–µ—Ä–æ–≤ –Ω–∞ –∫–∞—Ä—Ç–µ. –¢–µ–∫—É—â–∏–π —Ü–≤–µ—Ç: {current_color_display}.", reply_markup=markup)

@bot.callback_query_handler(func=lambda call: call.data.startswith(CALLBACK_PREFIX_COLOR_CHOICE))
def callback_set_marker_color(call):
    user_id = call.from_user.id
    message_id = call.message.message_id
    chat_id = call.message.chat.id

    chosen_color_code = call.data[len(CALLBACK_PREFIX_COLOR_CHOICE):]
    
    if chosen_color_code not in MARKER_COLORS.values():
        bot.answer_callback_query(call.id, text="‚ö†Ô∏è –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ü–≤–µ—Ç.", show_alert=True)
        return

    manager.set_user_marker_color(user_id, chosen_color_code)
    
    chosen_color_display = next((name for name, code in MARKER_COLORS.items() if code == chosen_color_code), chosen_color_code)

    bot.answer_callback_query(call.id, text=f"‚úÖ –¶–≤–µ—Ç –º–∞—Ä–∫–µ—Ä–æ–≤ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –Ω–∞ {chosen_color_display}.")
    
    try:
        bot.edit_message_text(f"üé® –¶–≤–µ—Ç –º–∞—Ä–∫–µ—Ä–æ–≤ —É—Å–ø–µ—à–Ω–æ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –Ω–∞ {chosen_color_display}.",
                              chat_id=chat_id,
                              message_id=message_id,
                              reply_markup=None)
    except telebot.apihelper.ApiTelegramException as e:
        if "message is not modified" in str(e).lower():
            pass
        else:
            print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")


if __name__=="__main__":
    print("–ë–æ—Ç –∑–∞–ø—É—Å–∫–∞–µ—Ç—Å—è...")
    bot.polling(none_stop=True)